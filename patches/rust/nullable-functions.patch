In Rust, function pointers are not allowed to be null. If you want
nullable function pointers, you need to wrap them in `Option<>`. This
isn't a problem for FFI/ABI compatibility because of Rust's
"null-pointer optimization":

<https://doc.rust-lang.org/nomicon/repr-rust.html>

Corrode ought to generate `Option`-wrapped types everywhere that C
function pointers are used, but it doesn't yet. That's being tracked
here:

<https://github.com/jameysharp/corrode/issues/77>

Index: b/src/hash.rs
===================================================================
--- a/src/hash.rs
+++ b/src/hash.rs
@@ -54,7 +54,7 @@ pub struct hashnode {
     pub key : *mut u8,
     pub data : *mut ::std::os::raw::c_void,
     pub len : usize,
-    pub delproc : unsafe extern fn(*mut hashnode),
+    pub delproc : Option<unsafe extern fn(*mut hashnode)>,
 }
 
 impl Clone for hashnode {
@@ -221,8 +221,8 @@ pub unsafe extern fn delnode(mut p : *mu
 }
 
 unsafe extern fn freenode_mem(mut p : *mut hashnode) {
-    if (*p).delproc as (*mut ::std::os::raw::c_void) != 0i32 as (*mut ::std::os::raw::c_void) {
-        ((*p).delproc)(p as (*mut hashnode));
+    if let Some(delproc) = (*p).delproc {
+        delproc(p as (*mut hashnode));
     } else if (*p).data != 0i32 as (*mut ::std::os::raw::c_void) {
         free((*p).data);
     }
@@ -233,7 +233,7 @@ unsafe extern fn freenode_mem(mut p : *m
                    (*p).data = 0i32 as (*mut ::std::os::raw::c_void);
                    (*p).data
                } as (*mut u8);
-    (*p).delproc = 0i32 as (*mut ::std::os::raw::c_void) as (unsafe extern fn(*mut hashnode));
+    (*p).delproc = None;
 }
 
 #[no_mangle]
@@ -480,8 +480,8 @@ pub unsafe extern fn list_isempty(mut li
 }
 
 static mut client_comp
-    : unsafe extern fn(*const hashnode, *const hashnode) -> i32
-    = 0 as (unsafe extern fn(*const hashnode, *const hashnode) -> i32);
+    : Option<unsafe extern fn(*const hashnode, *const hashnode) -> i32>
+    = None;
 
 unsafe extern fn xnmalloc(
     mut n : usize, mut s : usize
@@ -505,7 +505,7 @@ unsafe extern fn qsort_comp(
 ) -> i32 {
     let mut node1 : *mut *mut hashnode = elem1 as (*mut *mut hashnode);
     let mut node2 : *mut *mut hashnode = elem2 as (*mut *mut hashnode);
-    client_comp(
+    client_comp.unwrap()(
         *node1 as (*const hashnode),
         *node2 as (*const hashnode)
     )
@@ -517,7 +517,7 @@ pub unsafe extern fn sortlist(
     mut
     comp
     :
-    unsafe extern fn(*const hashnode, *const hashnode) -> i32
+    Option<unsafe extern fn(*const hashnode, *const hashnode) -> i32>
 ) {
     let mut head : *mut hashnode;
     let mut remain : *mut hashnode;
Index: b/src/fileattr.rs
===================================================================
--- a/src/fileattr.rs
+++ b/src/fileattr.rs
@@ -228,7 +228,7 @@ unsafe extern fn fileattr_read() {
                       } = b'\0';
                      newnode = ::hash::getnode();
                      (*newnode).type_ = ::hash::ntype::FILEATTR;
-                     (*newnode).delproc = fileattr_delproc as (unsafe extern fn(*mut hashnode));
+                     (*newnode).delproc = Some(fileattr_delproc);
                      (*newnode).key = Xstrdup(line.offset(1isize) as (*const u8));
                      (*newnode).data = Xstrdup(
                                            p as (*const u8)
@@ -572,7 +572,7 @@ pub unsafe extern fn fileattr_set(
             } else {
                 node = ::hash::getnode();
                 (*node).type_ = ::hash::ntype::FILEATTR;
-                (*node).delproc = fileattr_delproc as (unsafe extern fn(*mut hashnode));
+                (*node).delproc = Some(fileattr_delproc);
                 (*node).key = Xstrdup(filename);
                 (*node).data = Xasprintf(
                                    (*b"%s=%s\0").as_ptr(),
@@ -648,7 +648,7 @@ pub unsafe extern fn fileattr_setall(
             if attrs != 0i32 as (*mut ::std::os::raw::c_void) as (*const u8) {
                 node = ::hash::getnode();
                 (*node).type_ = ::hash::ntype::FILEATTR;
-                (*node).delproc = fileattr_delproc as (unsafe extern fn(*mut hashnode));
+                (*node).delproc = Some(fileattr_delproc);
                 (*node).key = Xstrdup(filename);
                 (*node).data = Xstrdup(attrs) as (*mut ::std::os::raw::c_void);
                 ::hash::addnode(attrlist,node);
@@ -676,7 +676,7 @@ pub unsafe extern fn fileattr_newfile(mu
         }
         node = ::hash::getnode();
         (*node).type_ = ::hash::ntype::FILEATTR;
-        (*node).delproc = fileattr_delproc as (unsafe extern fn(*mut hashnode));
+        (*node).delproc = Some(fileattr_delproc);
         (*node).key = Xstrdup(filename);
         (*node).data = Xstrdup(
                            fileattr_default_attrs as (*const u8)
Index: b/src/log.rs
===================================================================
--- a/src/log.rs
+++ b/src/log.rs
@@ -44,7 +44,7 @@ extern {
     ) -> bool;
     fn buf_free(arg1 : *mut buffer);
     fn buf_nonio_initialize(
-        arg1 : unsafe extern fn(*mut buffer)
+        arg1 : Option<unsafe extern fn(*mut buffer)>
     ) -> *mut buffer;
     fn buf_output(arg1 : *mut buffer, arg2 : *const u8, arg3 : usize);
     fn chdir(__path : *const u8) -> i32;
@@ -115,16 +115,16 @@ extern {
     fn start_recursion(
         fileproc
         :
-        unsafe extern fn(*mut ::std::os::raw::c_void, *mut ::vers_ts::file_info) -> i32,
+        Option<unsafe extern fn(*mut ::std::os::raw::c_void, *mut ::vers_ts::file_info) -> i32>,
         filesdoneproc
         :
-        unsafe extern fn(*mut ::std::os::raw::c_void, i32, *const u8, *const u8, *mut ::hash::hashlist) -> i32,
+        Option<unsafe extern fn(*mut ::std::os::raw::c_void, i32, *const u8, *const u8, *mut ::hash::hashlist) -> i32>,
         direntproc
         :
-        unsafe extern fn(*mut ::std::os::raw::c_void, *const u8, *const u8, *const u8, *mut ::hash::hashlist) -> direnter_type,
+        Option<unsafe extern fn(*mut ::std::os::raw::c_void, *const u8, *const u8, *const u8, *mut ::hash::hashlist) -> direnter_type>,
         dirleaveproc
         :
-        unsafe extern fn(*mut ::std::os::raw::c_void, *const u8, i32, *const u8, *mut ::hash::hashlist) -> i32,
+        Option<unsafe extern fn(*mut ::std::os::raw::c_void, *const u8, i32, *const u8, *mut ::hash::hashlist) -> i32>,
         callerdat : *mut ::std::os::raw::c_void,
         argc : i32,
         argv : *mut *mut u8,
@@ -818,10 +818,10 @@ unsafe extern fn rlog_proc(
         which = 1i32 << 0i32 | 1i32 << 1i32 | 1i32 << 2i32;
     }
     err = start_recursion(
-              log_fileproc,
-              0i32 as (*mut ::std::os::raw::c_void) as (unsafe extern fn(*mut ::std::os::raw::c_void, i32, *const u8, *const u8, *mut ::hash::hashlist) -> i32),
-              log_dirproc,
-              0i32 as (*mut ::std::os::raw::c_void) as (unsafe extern fn(*mut ::std::os::raw::c_void, *const u8, i32, *const u8, *mut ::hash::hashlist) -> i32),
+              Some(log_fileproc),
+              None,
+              Some(log_dirproc),
+              None,
               global_log_data as (*mut ::std::os::raw::c_void),
               argc - 1i32,
               argv.offset(1isize),
@@ -2230,9 +2230,7 @@ unsafe extern fn log_version(
             if rawsig.is_null() {
                 xalloc_die();
             }
-            membuf = buf_nonio_initialize(
-                         0i32 as (*mut ::std::os::raw::c_void) as (unsafe extern fn(*mut buffer))
-                     );
+            membuf = buf_nonio_initialize(None);
             buf_output(membuf,rawsig as (*const u8),rawsiglen);
             'loop24: loop {
                 if !({
Index: b/src/entries.rs
===================================================================
--- a/src/entries.rs
+++ b/src/entries.rs
@@ -263,7 +263,7 @@ unsafe extern fn AddEntryNode(
     }
     p = ::hash::getnode();
     (*p).type_ = ::hash::ntype::ENTRIES;
-    (*p).delproc = Entries_delproc as (unsafe extern fn(*mut hashnode));
+    (*p).delproc = Some(Entries_delproc);
     (*p).key = Xstrdup((*entdata).user as (*const u8));
     (*p).data = entdata as (*mut ::std::os::raw::c_void);
     ::hash::addnode(list,p);
@@ -916,7 +916,7 @@ pub unsafe extern fn Entries_Open_Dir(
         (*sdtp).date = Xstrdup(dirdate as (*const u8));
         (*sdtp).nonbranch = dirnonbranch;
         (*(*entries).list).data = sdtp as (*mut ::std::os::raw::c_void);
-        (*(*entries).list).delproc = freesdt as (unsafe extern fn(*mut hashnode));
+        (*(*entries).list).delproc = Some(freesdt);
     }
     sawdir = 0i32;
     update_dir = dir_append(update_dir_i,dir);
@@ -1021,7 +1021,7 @@ pub unsafe extern fn Entries_Open_Dir(
                ) as (*mut stickydirtag);
         (*sdtp).subdirs = 0i32;
         (*(*entries).list).data = sdtp as (*mut ::std::os::raw::c_void);
-        (*(*entries).list).delproc = freesdt as (unsafe extern fn(*mut hashnode));
+        (*(*entries).list).delproc = Some(freesdt);
     }
     if do_rewrite != 0 && (noexec == 0) {
         write_entries(entries,update_dir_i,dir);
